[{"path":[]},{"path":"https://globalgov.github.io/manypkgs/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://globalgov.github.io/manypkgs/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://globalgov.github.io/manypkgs/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://globalgov.github.io/manypkgs/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://globalgov.github.io/manypkgs/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement IHEID. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://globalgov.github.io/manypkgs/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://globalgov.github.io/manypkgs/CODE_OF_CONDUCT.html","id":"1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://globalgov.github.io/manypkgs/CODE_OF_CONDUCT.html","id":"2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://globalgov.github.io/manypkgs/CODE_OF_CONDUCT.html","id":"3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://globalgov.github.io/manypkgs/CODE_OF_CONDUCT.html","id":"4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://globalgov.github.io/manypkgs/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/ code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https:// www.contributor-covenant.org/translations.","code":""},{"path":"https://globalgov.github.io/manypkgs/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing","title":"Contributing","text":"Contributions manypkgs, whether form issue identification, bug fixes, new code documentation encouraged welcome, research assistants (early) users package: Submit issue Fix bug implement new features Document existing code outlines propose change package Global Governance Observatory’s ecosystem. Please note manypkgs project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://globalgov.github.io/manypkgs/CONTRIBUTING.html","id":"issues","dir":"","previous_headings":"","what":"Issues","title":"Contributing","text":"Please use issue tracker GitHub identify problems suggest new functionality, submitting changes code. use issues identify bugs tasks, discuss feature requests, track implementation changes. submitting issue, please provide least ‘Type’ label best describes issue . useful issues ones precisely identify bug, propose test pass instead fails.","code":""},{"path":"https://globalgov.github.io/manypkgs/CONTRIBUTING.html","id":"adding-new-code","dir":"","previous_headings":"","what":"Adding new code","title":"Contributing","text":"Independent assigned code contributions welcome. writing new code, please follow tidyverse style guide based standard R guidelines. can help use packages lintr goodpractice ensure followed. packages incorporated checks made pull request made. styler package fixes non-invasive way code adhere tidyverse formatting rules, also provides RStudio Addins help task. run lintr goodpractice checks use styler file run:","code":"# basic lintr checking lintr::lint_package(path = \"manypkgs/\")  # goodpractices checks. Exclude length 80 goodpractice::gp(path = \"manypkgs/\",    checks = all_checks()[-c(8)])  # styler fix some of the styling issues styler::style_file(\"filePath\")"},{"path":"https://globalgov.github.io/manypkgs/CONTRIBUTING.html","id":"writing-in-markdownroxygen","dir":"","previous_headings":"","what":"Writing in markdown/roxygen","title":"Contributing","text":"writing passages text markdown roxygen documents, please consider text written sentences, sometimes clauses sentence, start new line. facilitates comparison documents feedback GitHub. Lines text , ideally, 80 characters length.","code":""},{"path":"https://globalgov.github.io/manypkgs/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"","what":"Pull request process","title":"Contributing","text":"title PR briefly describe change. Please include summary changes issues fixed relevant motivation context. List dependencies required change, indicating whether major (breaking), minor, patch change. body PR contain Fixes #issue-number. checklist provided check cases different elements listed completed make sure steps respected. Make sure package passes R CMD check running devtools::check() commiting changes pull request. want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed openning pull request. ’ve found bug, please file issue illustrates bug minimal reprex. Please follow manypkgs pull request guideline (https://github.com/globalgov/manypkgs/blob/main/.github/pull_request_template.md)","code":""},{"path":"https://globalgov.github.io/manypkgs/CONTRIBUTING.html","id":"branches","dir":"","previous_headings":"Pull request process","what":"Branches","title":"Contributing","text":"use two main branches project: origin/main branch reserved fully functional releases model. develop branch reaches stable point, code maintainer merges back master branch, tags release number . origin/develop branch reflects latest model development stage. Contributers encouraged submit minor changes branch enhance existing functionality. New features may break existing functionality committed supporting branches. use two types supporting branches: Feature branches used develop new functionality. exist long feature developed, either merged develop branch incorporation release, deleted feature abandoned. Feature branches branch origin/develop. Hotfix branches used provide fixes severe bugs main branch. way, code maintainer incorporate (potentially unstable) changes develop branch fix issue. Branch names prefixed hotfix-. branching model based : https://nvie.com/posts/-successful-git-branching-model/.","code":""},{"path":"https://globalgov.github.io/manypkgs/CONTRIBUTING.html","id":"main-branch-code-maintainer-only","dir":"","previous_headings":"Pull request process","what":"Main Branch (code maintainer only)","title":"Contributing","text":"create release version code: Ensure repository --date: git pull. Switch main branch: git checkout master. Merge changes develop branch: git merge ---ff develop. Tag release version: git tag -VX.Y.Z -m \"VERSION-NAME\". Push changes repository git push origin master --tags.","code":""},{"path":"https://globalgov.github.io/manypkgs/CONTRIBUTING.html","id":"develop-branch-minor-changes-to-existing-functionality","dir":"","previous_headings":"Pull request process","what":"Develop Branch (minor changes to existing functionality)","title":"Contributing","text":"make minor changes directly develop branch, follow standard git procedures: Make sure switched develop branch project: git checkout -b develop. Make sure local version code --date: git pull origin develop. Make changes Stage changes commit: git add PATH--CHANGED-FILE. Commit changes using appropriate message: git commit -m \"DESCRIPTION\". Push commit: git push origin develop.","code":""},{"path":"https://globalgov.github.io/manypkgs/CONTRIBUTING.html","id":"feature-branches-new-functionality","dir":"","previous_headings":"Pull request process","what":"Feature Branches (new functionality)","title":"Contributing","text":"create new feature branch: git checkout -b myfeature develop. merge feature branch back develop:","code":"git checkout develop git merge --no-ff myfeature git branch -d myfeature git push origin develop"},{"path":"https://globalgov.github.io/manypkgs/CONTRIBUTING.html","id":"hotfix-branches-to-fix-critical-bugs-in-release-versions","dir":"","previous_headings":"Pull request process","what":"Hotfix Branches (to fix critical bugs in release versions)","title":"Contributing","text":"create new hotfix branch: git checkout -b hotfix-VERSION master. merge hotfix back master (code maintainer ): develop: Every hotfix increment PATCH digit version number: hotfix branch V1.3.0 named hotfix-V1.3.1, new release tagged V1.3.1. merged master develop, hotfix branch can deleted: git branch -d hotfix-VERSION.","code":"git checkout master git merge --no-ff hotfix-VERSION  git tag -a VERSION git push origin develop git checkout develop git merge --no-ff hotfix-VERSION"},{"path":"https://globalgov.github.io/manypkgs/CONTRIBUTING.html","id":"commit-messages","dir":"","previous_headings":"Pull request process","what":"Commit messages","title":"Contributing","text":"Commits relate existing issues reference updated status issues, mention issue number (preceded hash symbol: #) commit description: Resolved #31 adding new function things, also updated documentation issue hash (.e. #31) preceded resolve, resolves, resolved, close, closes, closed, fix, fixes, fixed (capitalised ), status issue(s) mentioned updated automatically. current syntactical standard mention issue first provide short description committed changes relation issue. ancillary changes can mentioned comma. written single line, like : #{verb} {issue} {describe main action/changes}, {additional actions/changes}. Note important write structured commit message improve efficiency collaboration. Please make sure : * Making title clear concise correct reference issue described . * Using subject line description part commit message outlines many different changes. * Explaining details changes made made using bullet points. * Separating paragraph blank line. keep tracking , needed, reversing changes easy possible, please follow ‘atomic approach’ committing changes. commit address separate aspects much possible, making bug fixes additions data separate commits.","code":""},{"path":"https://globalgov.github.io/manypkgs/CONTRIBUTING.html","id":"testing","dir":"","previous_headings":"Pull request process","what":"Testing","title":"Contributing","text":"use testthat package write unit tests. convention, tests located testthat/tests/. verify tests pass issuing commit existing code. run tests latest version manually: writing new function, consider writing unit test function. follow several conventions writing tests: unit test file test one aspects single function. makes easier identify source bugs, prevents lower-level tests failing higher-level functions change. naming convention test files : test-FILENAME_IN_R_DIRECTORY-FUNCTION_NAME.R, .e. test files named file containing original function R directory, pre-fixed “test”, optionally post-fixed name function tested. test requires auxiliary functions package, e.g. initialize network sample data, belong helper file. one helper file R file, named helper-FILENAME_IN_R_DIRECTORY-FUNCTION_NAME.R. Re-using existing test data preferable creating new data every test.","code":"git pull library(\"testthat\") testthat::test_dir(\"tests/testthat\")"},{"path":"https://globalgov.github.io/manypkgs/CONTRIBUTING.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Contributing","text":"final way contributing package developing vignettes/articles illustrate value added package. Please contact us directly proposals updating documentation, submit issue existing documentation unclear.","code":""},{"path":"https://globalgov.github.io/manypkgs/CONTRIBUTING.html","id":"versioning","dir":"","previous_headings":"","what":"Versioning","title":"Contributing","text":"Note package versioned according semantic versioning. means versions follow Major.Minor.Patch semantic format. minor major level version also given new version name, updated zzz.R file.","code":""},{"path":"https://globalgov.github.io/manypkgs/CONTRIBUTING.html","id":"for-developers-using-macos","dir":"","previous_headings":"","what":"For developers using MacOS","title":"Contributing","text":"Develops using MacOS might meet problems compiling packages since compiling configuration R MacOS usually incorrect. one meet error error info “/usr/bin/ld: find -lgfortran”, can either correct configuration follows following steps solve problem: 1. Run “.libPaths()” command R get path, e.g. one might get “/Library/Frameworks/R.framework/Versions/3.6/Resources/library” 2. path one get first step “something/library”, open file “something/etc/Makeconf” comment line starting “FLIBS”. e.g. one might open file \" /Library/Frameworks/R.framework/Versions/3.6/Resources/etc/Makeconf\" change line “FLIBS = -L/usr/local/gfortran/lib/gcc/x86_64-apple-darwin15/6.1.0 -L/usr/local/gfortran/lib -lgfortran -lquadmath -lm” “#FLIBS = -L/usr/local/gfortran/lib/gcc/x86_64-apple-darwin15/6.1.0 -L/usr/local/gfortran/lib -lgfortran -lquadmath - lm”","code":""},{"path":"https://globalgov.github.io/manypkgs/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU Affero General Public License","title":"GNU Affero General Public License","text":"Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://globalgov.github.io/manypkgs/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU Affero General Public License","text":"GNU Affero General Public License free, copyleft license software kinds works, specifically designed ensure cooperation community case network server software. licenses software practical works designed take away freedom share change works. contrast, General Public Licenses intended guarantee freedom share change versions program–make sure remains free software users. speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. Developers use General Public Licenses protect rights two steps: (1) assert copyright software, (2) offer License gives legal permission copy, distribute /modify software. secondary benefit defending users’ freedom improvements made alternate versions program, receive widespread use, become available developers incorporate. Many developers free software heartened encouraged resulting cooperation. However, case software used network servers, result may fail come . GNU General Public License permits making modified version letting public access server without ever releasing source code public. GNU Affero General Public License designed specifically ensure , cases, modified source code becomes available community. requires operator network server provide source code modified version running users server. Therefore, public use modified version, publicly accessible server, gives public access source code modified version. older license, called Affero General Public License published Affero, designed accomplish similar goals. different license, version Affero GPL, Affero released new version Affero GPL permits relicensing license. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://globalgov.github.io/manypkgs/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions.","title":"GNU Affero General Public License","text":"“License” refers version 3 GNU Affero General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://globalgov.github.io/manypkgs/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code.","title":"GNU Affero General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://globalgov.github.io/manypkgs/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions.","title":"GNU Affero General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://globalgov.github.io/manypkgs/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law.","title":"GNU Affero General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://globalgov.github.io/manypkgs/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies.","title":"GNU Affero General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://globalgov.github.io/manypkgs/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions.","title":"GNU Affero General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: work must carry prominent notices stating modified , giving relevant date. work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://globalgov.github.io/manypkgs/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms.","title":"GNU Affero General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://globalgov.github.io/manypkgs/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms.","title":"GNU Affero General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: Disclaiming warranty limiting liability differently terms sections 15 16 License; Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; Limiting use publicity purposes names licensors authors material; Declining grant rights trademark law use trade names, trademarks, service marks; Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://globalgov.github.io/manypkgs/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination.","title":"GNU Affero General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://globalgov.github.io/manypkgs/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies.","title":"GNU Affero General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://globalgov.github.io/manypkgs/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients.","title":"GNU Affero General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://globalgov.github.io/manypkgs/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents.","title":"GNU Affero General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://globalgov.github.io/manypkgs/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom.","title":"GNU Affero General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://globalgov.github.io/manypkgs/LICENSE.html","id":"13-remote-network-interaction-use-with-the-gnu-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Remote Network Interaction; Use with the GNU General Public License.","title":"GNU Affero General Public License","text":"Notwithstanding provision License, modify Program, modified version must prominently offer users interacting remotely computer network (version supports interaction) opportunity receive Corresponding Source version providing access Corresponding Source network server charge, standard customary means facilitating copying software. Corresponding Source shall include Corresponding Source work covered version 3 GNU General Public License incorporated pursuant following paragraph. Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU General Public License single combined work, convey resulting work. terms License continue apply part covered work, work combined remain governed version 3 GNU General Public License.","code":""},{"path":"https://globalgov.github.io/manypkgs/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License.","title":"GNU Affero General Public License","text":"Free Software Foundation may publish revised /new versions GNU Affero General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU Affero General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU Affero General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU Affero General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://globalgov.github.io/manypkgs/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty.","title":"GNU Affero General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://globalgov.github.io/manypkgs/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability.","title":"GNU Affero General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://globalgov.github.io/manypkgs/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16.","title":"GNU Affero General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://globalgov.github.io/manypkgs/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU Affero General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. software can interact users remotely computer network, also make sure provides way users get source. example, program web application, interface display “Source” link leads users archive code. many ways offer source, different solutions better different programs; see section 13 specific requirements. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU AGPL, see https://www.gnu.org/licenses/.","code":"<one line to give the program's name and a brief idea of what it does.>     Copyright (C) <year>  <name of author>      This program is free software: you can redistribute it and/or modify     it under the terms of the GNU Affero General Public License as     published by the Free Software Foundation, either version 3 of the     License, or (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU Affero General Public License for more details.      You should have received a copy of the GNU Affero General Public License     along with this program.  If not, see <https://www.gnu.org/licenses/>."},{"path":"https://globalgov.github.io/manypkgs/articles/agreements.html","id":"outlining-the-problem","dir":"Articles","previous_headings":"","what":"Outlining the problem","title":"Agreements","text":"One central problems ensembled data packages setting equivalences observations different datasets. central problem enables us relate datasets one another. required classificatory scheme recognised different observations recognised different. many cases, useful kind registry unique units existing , importantly, new data can read . several important features registry , required certainly helpful: Authoritative: registry singular source Comprehensivity: registry ideally cover possible units Succinct: registry codes short possible Intelligible: registry codes meaningful humans possible databases, unique identifiers much problem exists relatively comprehensive, authoritative, succinct, intelligible registry. example central states database manystates package. can rely ISO-3166 alpha-3 codes modern states, complementing COW codes historical states. combined registry made available manystates::code_states() function. aware comprehensive, authoritative, succinct, intelligible registry treaties. solve problem, need think observations might coded codes might represent.","code":""},{"path":"https://globalgov.github.io/manypkgs/articles/agreements.html","id":"setting-up-the-problem","dir":"Articles","previous_headings":"","what":"Setting up the problem","title":"Agreements","text":"test different solutions problem, construct sample treaty titles three different datasets manyenviron::agreements database. Let’s take titles treaties established particular decade, 1980s, can increase probability matches. sample hand coded exact number agreements duplicates linked one another known. hand coded 400 agreements sample compare duplicates identification.","code":"library(manyenviron) samples <- lapply(manyenviron::agreements, function(x) x[x$Beg > \"1990-01-01\" & x$Beg < \"2000-01-01\", ]) titles <- unlist(purrr::map(samples, \"Title\")) dates <- unlist(purrr::map(samples, \"Beg\")) sample <- cbind.data.frame(titles, dates) library(manypkgs) library(readr) agreements <- read_csv(\"hand-coded-sample.csv\")"},{"path":[]},{"path":"https://globalgov.github.io/manypkgs/articles/agreements.html","id":"a-perfect-match","dir":"Articles","previous_headings":"Options for solutions","what":"A perfect match","title":"Agreements","text":"use hand coded duplicates correctly identify duplicates sample, get perfect match! , identify true positives false positives. rates true positives false positives represented receiver operating characteristics (ROC) graph . area curve (AUC score), dark grey, graph maximized (equals 1).  reality, often get perfect score rarely know true duplicates across several large datasets.","code":"library(WVPlots) WVPlots::ROCPlot(agreements, \"duplicate\", \"duplicate\", 1, title = \"Duplicates Match\") # WVPlots::PRPlot(agreements, \"duplicate\", \"duplicate\", 1, title = \"Duplicates Match\") # Precision recall (PR) plots are also available for comparing solutions."},{"path":"https://globalgov.github.io/manypkgs/articles/agreements.html","id":"everything-unique","dir":"Articles","previous_headings":"Options for solutions","what":"Everything unique","title":"Agreements","text":"First simply offer unique code title, duplicates. Obviously generate errors side false negatives many titles quite obviously (humans) equivalent. , find zero false positives well zero true positives, ROC plot illustrates.","code":"agreements$unique <- 0 WVPlots::ROCPlot(agreements, \"unique\", \"duplicate\", 1, title = \"Unique\") # WVPlots::PRPlot(agreements, \"unique\", \"duplicate\", 1, title = \"Unique\")"},{"path":"https://globalgov.github.io/manypkgs/articles/agreements.html","id":"random","dir":"Articles","previous_headings":"Options for solutions","what":"Random","title":"Agreements","text":"randomly create variable 200 values use find duplicates, AUC scores marginally. ROC plot illustrates true positives well false positives matched.","code":"agreements$random <- runif(400) WVPlots::ROCPlot(agreements, \"random\", \"duplicate\", 1, title = \"Random\") # WVPlots::PRPlot(agreements, \"random\", \"duplicate\", 1, title = \"Random\") # PR results also illustrate well how Unique duplicate matches work."},{"path":"https://globalgov.github.io/manypkgs/articles/agreements.html","id":"strict-match","dir":"Articles","previous_headings":"Options for solutions","what":"Strict match","title":"Agreements","text":"consider equivalent titles exactly one another.  Note AUC probably boosted use manypkgs::standardise_titles(), misses number problematic cases. example “Treaty …” “Treaty …” considered distinct, “Antarctic Treaty” “Antarctic Treaty 1959”, even though rendered equivalent. Strict match specify, sensible, generates false positives captures many true positives.","code":"agreements$strict <- ifelse(duplicated(agreements$titles) |                                    duplicated(agreements$titles, fromLast = TRUE), 1, 0) WVPlots::ROCPlot(agreements, \"strict\", \"duplicate\", 1, title = \"Strict\") # WVPlots::PRPlot(agreements, \"strict\", \"duplicate\", 1, title = \"Strict\") # PR plot is consistent with ROC plot and shows little improvement from a random match."},{"path":"https://globalgov.github.io/manypkgs/articles/agreements.html","id":"fuzzy-match","dir":"Articles","previous_headings":"Options for solutions","what":"Fuzzy match","title":"Agreements","text":"Fuzzy matching relies stringdist match observations mostly similar identical.  risk finding incorrect matches fuzzy matching. explains slightly lower AUC score get comparison strict matches. , although better job finding true matches fuzzy, also get false positives. Moreover, option computationally expensive/takes long time","code":"library(stringdist) fuzzy <- stringdist::stringsimmatrix(agreements$titles, agreements$titles) diag(fuzzy) <- 0 agreements$fuzzy <- apply(fuzzy, 1, max) agreements$fuzzy <- ifelse(agreements$fuzzy > 0.8, 1, 0) WVPlots::ROCPlot(agreements, \"fuzzy\", \"duplicate\", 1, title = \"Fuzzy\") # WVPlots::PRPlot(agreements, \"fuzzy\", \"duplicate\", 1, title = \"Fuzzy\") # Improvements are also visible in the PR plot."},{"path":"https://globalgov.github.io/manypkgs/articles/agreements.html","id":"identifying-information-extraction","dir":"Articles","previous_headings":"Options for solutions","what":"Identifying information extraction","title":"Agreements","text":"Another option extract key identifying information titles dates, rendering equivalent titles key identifying information. question information extract titles. needs enough information render distinct titles indeed distinct, ignores less salient information (e.g. “” versus “”) addenda (e.g. year end treaty title). less information require match, higher false positive rate, information require, higher false negative rate. Using current version manypkgs obtain:  AUC score code_agreements() higher get fuzzy strict matches. relations options, code_agreements() improves number true observations matched generating many false positives. Still, perfect true matches still missing. happens titles differ great deal, even refering agreement. cases, prefer stay side caution refrain trying code titles duplicates, especially changes likely lead higher rates false positives.","code":"agreements$treatyID <- manypkgs::code_agreements(agreements, agreements$titles, agreements$dates) #> 0 entries were not matched at all. #> There were 127 duplicated IDs. agreements$idinfo <- ifelse(duplicated(agreements$treatyID) |                                    duplicated(agreements$treatyID, fromLast = TRUE), 1, 0) WVPlots::ROCPlot(agreements, \"idinfo\", \"duplicate\", 1, title = \"treatyID Strict\") # WVPlots::PRPlot(agreements, \"idinfo\", \"duplicate\", 1, title = \"treatyID Strict\") # PR plot illustrate similarities betwwen a perfect match and treatyID match."},{"path":"https://globalgov.github.io/manypkgs/articles/agreements.html","id":"condensing-treatyid-matches","dir":"Articles","previous_headings":"Options for solutions","what":"Condensing treatyID matches","title":"Agreements","text":"can also improve AUC scores fuzzy matching new treatyIDs generated code_agreements() different datasets condense_agreements().","code":"qsim <- manypkgs::condense_agreements(var = agreements$treatyID) agreements <- dplyr::left_join(agreements, qsim, by = \"treatyID\") agreements$qsim <- ifelse(duplicated(agreements$manyID) |                             duplicated(agreements$manyID, fromLast = TRUE), 1, 0)  WVPlots::ROCPlot(agreements, \"qsim\", \"duplicate\", 1, title = \"treatyID Sim\") # qsim <- stringdist::stringsimmatrix(agreements$treatyID, agreements$treatyID) # diag(qsim) <- 0 # agreements$qsim <- apply(qsim, 1, max) # WVPlots::ROCPlot(agreements, \"qsim\", \"duplicate\", 1, title = \"treatyID Sim\") # WVPlots::PRPlot(agreements, \"qsim\", \"duplicate\", 1, title = \"treatyID Sim\") # Better than above!"},{"path":"https://globalgov.github.io/manypkgs/articles/agreements.html","id":"comparing-specificity-versus-sensitivity","dir":"Articles","previous_headings":"Options for solutions","what":"Comparing specificity versus sensitivity","title":"Agreements","text":"can compare specificity versus sensitivity possible solutions discussed ROC plot.","code":"WVPlots::ROCPlotList(frame = agreements, xvar_names = c(\"strict\", \"fuzzy\", \"idinfo\", \"qsim\"),                       truthVar = \"duplicate\", truthTarget = TRUE, title = \"Comparing the different solutions\")"},{"path":"https://globalgov.github.io/manypkgs/articles/agreements.html","id":"how-to-read-a-treatyid","dir":"Articles","previous_headings":"","what":"How to read a treatyID","title":"Agreements","text":"treatyID meaningful shorthand ID created combination elements extracted agreement title date. treatyID allows users identify date, type linkage. bilateral treaty agreement following treatyID: \"FRA-TON[DEZ]_1980A“. combination parties agreement (FRA-TON), activity described treaty, ”Delimitation Economic Zone (DEZ)\", year signature (1980), followed type (= Agreement). bilateral treaty type agreement (e.g. protocol, amendments) treatyID format: \"RUS-USA[FKC]_1967E:FKC_1965A“. composed parties (RUS-USA), activity abbreviation treaty title”Fishing King Crab (FKC)“, year signature amendment (1967), type (E) refers Amendment. linkage portion links agreement treatyID ”mother\" treaty, without repeating parties ([FKC]_1965A). multilateral treaty agreement following treatyID: “HSPDF_2005A”. treatyID indicates acronym (HSPDF), signature year agreement (2005) type (). multilateral treaty agreement treatyID format: “SFDP_1992E2:H08F_2007”. represents acronym (SFDP), signature year amendment (2007), type (E = Amendment), number amendment (2) linkage number (H08F_2007) “mother” treaty. Famous multilateral treaties simplified treatyID known abbreviation. example, United Nations Convention Law Sea following treatyID: “UNCLOC1982A”. known abbreviation (UNCLOS) signature year (1982) type (). Protocols amendments known treaties treatyID format: “J09H_1990E2:MARPOL1973A”. indicates acronym (J09H), signature year specific amendment (1990), type treaty (E), number (2) treatyID “mother” treaty (MARPOL197A).","code":""},{"path":"https://globalgov.github.io/manypkgs/articles/agreements.html","id":"how-code_agreements-work","dir":"Articles","previous_headings":"","what":"How code_agreements() work","title":"Agreements","text":"function extracts important information treaty titles dates step way make sure duplicates actual duplicates.","code":""},{"path":"https://globalgov.github.io/manypkgs/articles/agreements.html","id":"parties","dir":"Articles","previous_headings":"How code_agreements() work","what":"Parties","title":"Agreements","text":"first element extracted title parties treaty. function code_parties()returns 3 digit ISO codes states two parties identified (.e. bilateral treaty). three letters abbreviation brackets pasted next parties represent activity title. activity generated code_activity(), uses core words end trety titles generate 3 letter acronyms activity. Parties activity returned bilateral treaties.","code":"manypkgs::code_parties(agreements$titles)"},{"path":"https://globalgov.github.io/manypkgs/articles/agreements.html","id":"acronyms","dir":"Articles","previous_headings":"How code_agreements() work","what":"Acronyms","title":"Agreements","text":"Multilateral treaties start acronyms generated code_acronym() function. code_acronym() extracts letters title specific words, numbers special characters deleted title. title exceed certain length (6 letters), acronyms contain numbers ltters ommited generating acronym.","code":"manypkgs::code_acronym(agreements$titles)"},{"path":"https://globalgov.github.io/manypkgs/articles/agreements.html","id":"date","dir":"Articles","previous_headings":"How code_agreements() work","what":"Date","title":"Agreements","text":"year treaty’s signature extracted code_dates.","code":"manypkgs::code_dates(agreements$dates)"},{"path":"https://globalgov.github.io/manypkgs/articles/agreements.html","id":"type","dir":"Articles","previous_headings":"How code_agreements() work","what":"Type","title":"Agreements","text":"code_type() detects type treaty assigns letter agreement type. Agreements = Amendments = E Protocol = P Notes = N Resolutions = R Strategy = S see key words used identify treaty type, please run code_type(). amendments protocol, ordering numbers, present, also extracted code_type()","code":"manypkgs::code_type(agreements$titles)"},{"path":"https://globalgov.github.io/manypkgs/articles/agreements.html","id":"known-agreements","dir":"Articles","previous_headings":"How code_agreements() work","what":"Known Agreements","title":"Agreements","text":"famous agreements abbreviations known? treaties already well-known abbreviations. complete list known agreements coded, please run code_known_agreements().","code":"manypkgs::code_known_agreements(agreements$titles)"},{"path":"https://globalgov.github.io/manypkgs/articles/agreements.html","id":"linkage","dir":"Articles","previous_headings":"How code_agreements() work","what":"Linkage","title":"Agreements","text":"Detects family treaty might belong . Treaties family can detected removing predictable words added treaty titles (e.g. amendment, protocol, meeting) identifying duplicates based core words used refer main agreement. added together, information extracted treaty title date forms treatyID authoritative, comprehensible, succinct intelligible conventions.","code":"manypkgs::code_linkage(agreements$titles, agreements$dates)"},{"path":"https://globalgov.github.io/manypkgs/articles/contributor.html","id":"contributing-to-the-manydata-universe-of-packages-with-manypkgs","dir":"Articles","previous_headings":"","what":"Contributing to the manydata universe of packages with manypkgs","title":"Contributing with manypkgs","text":"manypkgs package related functions help developers contribute ecosystem packages helping set-packages consistent manydata. function setup_package(), example, establishes many required files folder structures manydata-consistent data package. requires package name starts prefix ‘many’ well name one author declared. author’s name, please declare surname(s) first given name(s) separated commas. function accepts ORCID numbers instead author names well. adding package contributors authors packages later , use add_author() function. function also accepts ORCID numbers instead author names. automatically updating packages changes templates, documentation, file structure, contributors can use update_package() function.","code":"manypkgs::setup_package(\"manystates\", name = \"Hollway, James\") manypkgs::add_author(name = \"Sposito, Henrique\") manypkgs::update_package(\"manystates\")"},{"path":"https://globalgov.github.io/manypkgs/articles/contributor.html","id":"collecting-data","dir":"Articles","previous_headings":"","what":"Collecting data","title":"Contributing with manypkgs","text":"data collection loading new package manypkgs, function import_data() creates data-raw folder package, copies raw data folder provides script facilitate data loading. function requires name dataset - two dimensional data sheet imported - declared, upper case letters, well name issue-domain, lower case letters, dataset belongs. Note transparency citation purposes, contributors need provide .bib file alongside data corresponding data-raw subfolder. domain issue name used connect two-dimensional datasets three-dimensional databases resembles data cube (list object entries tibbles).","code":"manypkgs::import_data(\"COW\", \"states\")"},{"path":"https://globalgov.github.io/manypkgs/articles/contributor.html","id":"correcting-data","dir":"Articles","previous_headings":"","what":"Correcting data","title":"Contributing with manypkgs","text":"dataset collected import_data(), needs corrected can connected database. manydata contains several functions geared towards data wrangling. include, example, transmutate() function dplyr’s transmute mutate returns mutated variables none variables used mutations. Furthermore, standardise_title() function capitalises words string removes unnecessary symbols enable comparison. Finally, manydata data preparation workflows also leverage {messydates} correct uncertain dates. include, example, messydates::make_messydate() function creates nested vectors dates vague date inputs range dates. Contributors make sure variables names datasets line manydata ecosystem. Datasets part database similar variables allows build ‘datacube’ comparison.","code":"COW <- manydata::transmutate(ID = stateabb,                    Beg = messydates::make_messydate(styear, stmonth, stday),                    End = messydates::make_messydate(endyear, endmonth, endday),                    Label = manypkgs::standardise_titles(statenme),                    COW_Nr = manypkgs::standardise_titles(as.character(ccode)))"},{"path":"https://globalgov.github.io/manypkgs/articles/contributor.html","id":"connecting-data","dir":"Articles","previous_headings":"","what":"Connecting data","title":"Contributing with manypkgs","text":"dataset corrected manydata, cleaned dataset can loaded manypkgs package using export_data() function take inputs dataset name database name string. Corrected datasets can connected form three dimensional database resembles data cube. website source data indicated third argument function. function creates database data folder store corrected datasets, providing citation template test template. citation template helps cite source raw data describe variables corrected dataset. test template makes sure corrected dataset consistent manypkgs guidelines. test template meant ensure consistency corrected dataset. tests fail, users can go back correcting data re-run export_data().","code":"manypkgs::export_data(COW, \"states\", URL = \"https://correlatesofwar.org/data-sets/state-system-membership\")"},{"path":"https://globalgov.github.io/manypkgs/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"James Hollway. Maintainer, author, contributor.            IHEID Henrique Sposito. Contributor.            IHEID Bernhard Bieri. Contributor.            IHEID Esther Peev. Contributor.            IHEID Jael Tan. Contributor.            IHEID","code":""},{"path":"https://globalgov.github.io/manypkgs/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"J. Hollway. manypkgs: Support Creating Ensembled Global Governance Data. 2021.","code":"@Manual{,   title = {manypkgs: Support for Creating Ensembled Global Governance Data},   author = {James Hollway},   year = {2021},   url = {https://github.com/globalgov/manypkgs}, }"},{"path":"https://globalgov.github.io/manypkgs/index.html","id":"manypkgs-","dir":"","previous_headings":"","what":"Support for Creating Ensembled Global Governance Data","title":"Support for Creating Ensembled Global Governance Data","text":"manypkgs package many packages universe. provides contributors necessary tools put data hands users. package includes functions make easier set ‘many’ package, import existing data, export structures consistent packages many packages universe. details, please see vignette.","code":""},{"path":"https://globalgov.github.io/manypkgs/index.html","id":"downloading-and-installing-manypkgs","dir":"","previous_headings":"","what":"Downloading and installing manypkgs","title":"Support for Creating Ensembled Global Governance Data","text":"development version manypkgs can downloaded GitHub.","code":"# install.packages(\"remotes\") remotes::install_github(\"globalgov/manypkgs\")"},{"path":[]},{"path":"https://globalgov.github.io/manypkgs/index.html","id":"the-many-packages-universe","dir":"","previous_headings":"","what":"The many packages universe","title":"Support for Creating Ensembled Global Governance Data","text":"many packages universe aims making easier collect, correct, connect network data across issue-domains global governance. manydata core package ofnthe many packages universe. package makes easy find, download, analyze data included various ‘many packages’. example, manydata::get_packages() function can used discover packages currently available many packages universe. Please see website information use manypkgs developer data contributor. information manydata, please see website.","code":"manydata::get_packages() ## # A tibble: 7 × 6 ##   name        full_name             ##   <chr>       <chr>                 ## 1 manydata    globalgov/manydata    ## 2 manyenviron globalgov/manyenviron ## 3 manyhealth  globalgov/manyhealth  ## 4 manypkgs    globalgov/manypkgs    ## 5 manystates  globalgov/manystates  ## 6 manytrade   globalgov/manytrade   ## 7 messydates  globalgov/messydates  ##   description                                                           ##   <chr>                                                                 ## 1 An R portal for ensembled global governance data                      ## 2 R Package for ensembled data on environmental agreements              ## 3 An R package for ensembled data on international health organisations ## 4 Support for creating new manyverse packages                           ## 5 An R package for ensembled data on sovereign states                   ## 6 An R package for ensembled data on trade agreements                   ## 7 An R package for ISO's Extended Date/Time Format (EDTF)               ##   installed latest        updated    ##   <chr>     <chr>         <date>     ## 1 0.7.5     0.7.5         2022-06-07 ## 2 0.1.2     0.1.2         2022-03-16 ## 3 <NA>      0.1.1-272ea19 2022-02-15 ## 4 0.2.2     0.2.1         2022-02-18 ## 5 0.1.0     0.0.6         2021-12-06 ## 6 0.1.2     0.1.2         2022-07-14 ## 7 0.3.1     0.3.0         2022-07-04"},{"path":[]},{"path":"https://globalgov.github.io/manypkgs/pull_request_template.html","id":"checklist","dir":"","previous_headings":"","what":"Checklist:","title":"Description","text":"given pull request informative title Description itemizes changes subtitles, e.g. “## Collection”\" closed, fixed, related issues referenced explained description , e.g. “Fixed #0 adding ” Package builds OS without issues Package builds Mac Package builds Windows Package builds Linux CodeCov check: Package improves maintains good test coverage CodeFactor check: Package improves maintains good style new modified functions data roxygen style documentation .R scripts longer functions commented inline easier debug future PR description NEWS.md file aligned DESCRIPTION file version bumped appropriate increment (major, minor, patch)","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/add_author.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an author to the current package — add_author","title":"Add an author to the current package — add_author","text":"Adds author description file current package.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/add_author.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an author to the current package — add_author","text":"","code":"add_author(   orcid = NULL,   name = NULL,   role = NULL,   email = NULL,   affiliation = NULL )"},{"path":"https://globalgov.github.io/manypkgs/reference/add_author.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an author to the current package — add_author","text":"orcid Character string author's ORCID number. null, function switches manual entry. name vector giving package author(s)' name(s). Authors(s)last name(s) first name(s) separated comma. role Character vector role(s) author project. Contributor default. example \"c(aut, cre, ctb)\". email Character string author's email affiliation Character vector author's miscellaneous information /institution.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/add_author.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an author to the current package — add_author","text":"Adds new author description file package","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/add_author.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add an author to the current package — add_author","text":"function adds author description file current package. can done two ways. First can specify ORCID number author want add. leverage excellent rorcid package scrape information ORCID API fill description file automatically. Second, can specify arguments manually author ORCID number. Finally, note default role new author set contributor.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/add_author.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add an author to the current package — add_author","text":"","code":"if (FALSE) { add_author(orcid = \"0000-0002-8361-9647\", role = list(c(\"aut\", \"cre\", \"ctb\"))) add_author(name = \"Smith, John\", affiliation = \"University of Somewhere\") }"},{"path":"https://globalgov.github.io/manypkgs/reference/add_bib.html","id":null,"dir":"Reference","previous_headings":"","what":"Add .bib file — add_bib","title":"Add .bib file — add_bib","text":"Add .bib file template help cite datasets package universe.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/add_bib.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add .bib file — add_bib","text":"","code":"add_bib(database, dataset)"},{"path":"https://globalgov.github.io/manypkgs/reference/add_bib.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add .bib file — add_bib","text":"database Name database dataset part dataset Name dataset","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/add_bib.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add .bib file — add_bib","text":".bib template saved data-raw folder completed","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/add_bib.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add .bib file — add_bib","text":"","code":"if (FALSE) { add_bib(\"states\", \"COW\") }"},{"path":"https://globalgov.github.io/manypkgs/reference/code_accession_terms.html","id":null,"dir":"Reference","previous_headings":"","what":"Get conditions and processes to accede memberships — code_accession_terms","title":"Get conditions and processes to accede memberships — code_accession_terms","text":"function extracts information conditions parties become part treaty different processes become treaty member.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/code_accession_terms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get conditions and processes to accede memberships — code_accession_terms","text":"","code":"code_accession_terms(textvar, title = NULL, accession = NULL)"},{"path":"https://globalgov.github.io/manypkgs/reference/code_accession_terms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get conditions and processes to accede memberships — code_accession_terms","text":"textvar text variable title title variable. NULL default. accession \"condition\" \"process\" parties accede treaty. \"process\" default.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/code_accession_terms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get conditions and processes to accede memberships — code_accession_terms","text":"list accession conditions processes.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/code_accession_terms.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get conditions and processes to accede memberships — code_accession_terms","text":"function helps provide metadata accession treaties allowing researchers connect compare information. processes relate new members accede treaty include treaty signature, treaty ratification, notification consent, majority vote. conditions treaty accession include entity type area, certain issue-domain, open membership , nomination new members.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/code_accession_terms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get conditions and processes to accede memberships — code_accession_terms","text":"","code":"if (FALSE) { m <- manyenviron::texts$AGR_TXT[200:300,] code_accession_terms(m$Text, m$Title, accession = \"condition\") code_accession_terms(m$Text, accession = \"process\") code_accession_terms() }"},{"path":"https://globalgov.github.io/manypkgs/reference/code_acronym.html","id":null,"dir":"Reference","previous_headings":"","what":"Code Acronym for Titles — code_acronym","title":"Code Acronym for Titles — code_acronym","text":"Codes acronym agreement titles facilitate identification comparuison across datasets.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/code_acronym.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Code Acronym for Titles — code_acronym","text":"","code":"code_acronym(title)"},{"path":"https://globalgov.github.io/manypkgs/reference/code_acronym.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Code Acronym for Titles — code_acronym","text":"title character vector treaty title","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/code_acronym.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Code Acronym for Titles — code_acronym","text":"Codes acronyms 4 6 digits long. shorter treaty titles, six words less, acronym includes first letter word. longer treaty titles, seven words , acronym includes first letter first word followed number words title first letter last word title.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/code_acronym.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Code Acronym for Titles — code_acronym","text":"","code":"# \\donttest{ IEADB <- dplyr::slice_sample(manyenviron::agreements$IEADB, n = 10) code_acronym(IEADB$Title) #>  [1] \"IR07AF\" \"GR14TU\" \"US10BS\" \"GR10AE\" \"INTRRW\" \"CPRQPP\" \"EN05AC\" \"CE07RN\" #>  [9] \"CM10RS\" \"GR08AE\" # }"},{"path":"https://globalgov.github.io/manypkgs/reference/code_activity.html","id":null,"dir":"Reference","previous_headings":"","what":"Code Abbreviations for Activity — code_activity","title":"Code Abbreviations for Activity — code_activity","text":"Code abbreviated form activity bilateral treaties treaty titles.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/code_activity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Code Abbreviations for Activity — code_activity","text":"","code":"code_activity(title)"},{"path":"https://globalgov.github.io/manypkgs/reference/code_activity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Code Abbreviations for Activity — code_activity","text":"title character vector treaty titles","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/code_activity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Code Abbreviations for Activity — code_activity","text":"character vector abbreviations last words treaty title","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/code_activity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Code Abbreviations for Activity — code_activity","text":"Bilateral agreements usually detail activity specify area last words titles. last words abbreviated function differentiate bilateral treaties avoid false positives generated since multiple, different, bilateral treaties often signed day.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/code_agreements.html","id":null,"dir":"Reference","previous_headings":"","what":"Code Agreement Titles — code_agreements","title":"Code Agreement Titles — code_agreements","text":"Creates ID contains information parties agreement, type agreement, date linkage agreements dataset.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/code_agreements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Code Agreement Titles — code_agreements","text":"","code":"code_agreements(dataset = NULL, title, date)"},{"path":"https://globalgov.github.io/manypkgs/reference/code_agreements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Code Agreement Titles — code_agreements","text":"dataset dataset name. provided without title date variables, function finds title date conforming columns dataset. function \"expects\" variables named Title Signature standardised using standardise_titles() messydates::as_messydate(), respectively. title title variable. function \"expects\" variable standardised using standardise_titles() date date variable. function \"expects\" variable standardised using messydates::as_messydate().","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/code_agreements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Code Agreement Titles — code_agreements","text":"character vector treatyIDs","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/code_agreements.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Code Agreement Titles — code_agreements","text":"","code":"# \\donttest{ IEADB <- dplyr::slice_sample(manyenviron::agreements$IEADB, n = 10) code_agreements(dataset = IEADB) #> ✔ Title and date conforming columns in dataset automatically found #> ✔ Coded agreement parties #> ✔ Coded agreement type #> ✔ Coded known agreements #> ✔ Coded agreement dates #> ✔ Coded acronyms for agreements #> ✔ Coded agreement linkages #> 0 entries were not matched at all. #> There were 0 duplicated IDs. #> ✔ Please run `vignette('agreements')` for more information. #>  [1] \"ACEWNH_2001E2\"      \"CPRAEM_2005P\"       \"ESP-PRT[RDE]_1964A\" #>  [4] \"PRPLBS_1986P\"       \"KAZ-KGZ[DCR]_2000A\" \"CRI-MCO[MEP]_2004A\" #>  [7] \"DEU-NAM[FOW]_2000A\" \"GR15TU_2010A\"       \"CTMHWD_1995E\"       #> [10] \"TC07ML_1977A\"       code_agreements(title = IEADB$Title, date = IEADB$Signature) #> ✔ Coded agreement parties #> ✔ Coded agreement type #> ✔ Coded known agreements #> ✔ Coded agreement dates #> ✔ Coded acronyms for agreements #> ✔ Coded agreement linkages #> 0 entries were not matched at all. #> There were 0 duplicated IDs. #> ✔ Please run `vignette('agreements')` for more information. #>  [1] \"ACEWNH_2001E2\"      \"CPRAEM_2005P\"       \"ESP-PRT[RDE]_1964A\" #>  [4] \"PRPLBS_1986P\"       \"KAZ-KGZ[DCR]_2000A\" \"CRI-MCO[MEP]_2004A\" #>  [7] \"DEU-NAM[FOW]_2000A\" \"GR15TU_2010A\"       \"CTMHWD_1995E\"       #> [10] \"TC07ML_1977A\"       # }"},{"path":"https://globalgov.github.io/manypkgs/reference/code_dates.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates Numerical IDs from Signature Dates — code_dates","title":"Creates Numerical IDs from Signature Dates — code_dates","text":"Agreements unique identification number meaningful, condense signature dates produce number.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/code_dates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates Numerical IDs from Signature Dates — code_dates","text":"","code":"code_dates(date)"},{"path":"https://globalgov.github.io/manypkgs/reference/code_dates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates Numerical IDs from Signature Dates — code_dates","text":"date date variable","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/code_dates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates Numerical IDs from Signature Dates — code_dates","text":"character vector condensed dates","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/code_dates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates Numerical IDs from Signature Dates — code_dates","text":"","code":"# \\donttest{ IEADB <- dplyr::slice_sample(manyenviron::agreements$IEADB, n = 10) code_dates(IEADB$Title) #>  [1] \"Agreement Amending And Extending The Agreement Between The Government Of The United States Of America And The Government Of The Union Of Soviet Socialist Republics On Certain Fishery Problems In The North Eastern Part Of The Pacific Ocean Off The Coast Of The United States Of Ame\" #>  [2] \"Agreement Regarding Maritime Fisheries Between Spain And The Seyche\"                                                                                                                                                                                                                      #>  [3] \"Exchange Of Letters Constituting An Agreement Between Sri Lanka And India On The Wadge Bank Fishe\"                                                                                                                                                                                        #>  [4] \"International Agreement On The River Scheldt50es\"                                                                                                                                                                                                                                         #>  [5] \"Protocol On The Navigation Regime To The Framework Agreement On The Sava River B\"                                                                                                                                                                                                         #>  [6] \"Convention Between The Grand Duchy Of Luxembourg And Prussia Concerning The Regulation Of Fisheries In Boundary Wa\"                                                                                                                                                                       #>  [7] \"Convention For The Protection Of The World Cultural And Natural Heri\"                                                                                                                                                                                                                     #>  [8] \"Amendments To The Constitution Of The European Commission For The Control Of Foot And Mouth Dis\"                                                                                                                                                                                          #>  [9] \"Subsidiary Agreement On Fisheries Between The Government Of Australia And The Government Of Japan Concerning Japanese Tuna Long Line Fis\"                                                                                                                                                 #> [10] \"Agreement On The Regulation Of North Pacific Wha\"                                                                                                                                                                                                                                         # }"},{"path":"https://globalgov.github.io/manypkgs/reference/code_domain.html","id":null,"dir":"Reference","previous_headings":"","what":"Code domains from agreement titles — code_domain","title":"Code domains from agreement titles — code_domain","text":"Code domains agreement titles","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/code_domain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Code domains from agreement titles — code_domain","text":"","code":"code_domain(title)"},{"path":"https://globalgov.github.io/manypkgs/reference/code_domain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Code domains from agreement titles — code_domain","text":"title Treaty titles","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/code_domain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Code domains from agreement titles — code_domain","text":"domain taken agreement title","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/code_domain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Code domains from agreement titles — code_domain","text":"","code":"# \\donttest{ title <- sample(manyenviron::agreements$IEADB$Title, 30) code_domain(title) #>  [1] \"fishing\"                \"energy\"                 \"territorial boundaries\" #>  [4] \"environment\"            \"fishing\"                NA                       #>  [7] \"human rights\"           \"fishing\"                \"environment\"            #> [10] \"environment\"            \"waste\"                  \"fishing\"                #> [13] \"fishing\"                NA                       \"waste\"                  #> [16] \"waste\"                  \"fishing\"                \"fishing\"                #> [19] \"environment\"            \"energy\"                 \"health\"                 #> [22] \"environment\"            \"climate change\"         \"fishing\"                #> [25] \"fishing\"                NA                       \"territorial boundaries\" #> [28] \"climate change\"         \"fishing\"                \"environment\"            # }"},{"path":"https://globalgov.github.io/manypkgs/reference/code_entity.html","id":null,"dir":"Reference","previous_headings":"","what":"Code Agreement Entity — code_entity","title":"Code Agreement Entity — code_entity","text":"Code Agreement Entity","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/code_entity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Code Agreement Entity — code_entity","text":"","code":"code_entity(title)"},{"path":"https://globalgov.github.io/manypkgs/reference/code_entity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Code Agreement Entity — code_entity","text":"title Treaty titles","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/code_entity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Code Agreement Entity — code_entity","text":"region agreement","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/code_entity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Code Agreement Entity — code_entity","text":"","code":"# \\donttest{ title <- sample(manyenviron::agreements$IEADB$Title, 30) code_entity(title) #> ℹ Please make sure JavaScript is installed. #> Installing package into ‘/Users/runner/work/_temp/Library’ #> (as ‘lib’ is unspecified) #>  [1] \"Northern\"                  NA                          #>  [3] NA                          NA                          #>  [5] NA                          NA                          #>  [7] NA                          NA                          #>  [9] NA                          NA                          #> [11] NA                          NA                          #> [13] NA                          NA                          #> [15] \"Caribbean States\"          NA                          #> [17] NA                          NA                          #> [19] NA                          NA                          #> [21] \"Luso Spanish River Basins\" NA                          #> [23] NA                          NA                          #> [25] NA                          NA                          #> [27] NA                          \"River\"                     #> [29] \"Caribbean\"                 NA                          # }"},{"path":"https://globalgov.github.io/manypkgs/reference/code_known_agreements.html","id":null,"dir":"Reference","previous_headings":"","what":"Code Known Agreements Abbreviation — code_known_agreements","title":"Code Known Agreements Abbreviation — code_known_agreements","text":"agreements known abbreviations facilitate identification.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/code_known_agreements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Code Known Agreements Abbreviation — code_known_agreements","text":"","code":"code_known_agreements(title)"},{"path":"https://globalgov.github.io/manypkgs/reference/code_known_agreements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Code Known Agreements Abbreviation — code_known_agreements","text":"title character vector treaty title","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/code_known_agreements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Code Known Agreements Abbreviation — code_known_agreements","text":"character vector abbreviation known treaties","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/code_known_agreements.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Code Known Agreements Abbreviation — code_known_agreements","text":"function identifies agreements match list known agreements titles, abbreviations signature dates substitutes known titles abbreviations.complete list known agreements coded respective abbreviations please run function without argument (.e. code_known_agreements()).","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/code_known_agreements.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Code Known Agreements Abbreviation — code_known_agreements","text":"","code":"# \\donttest{ IEADB <- dplyr::slice_sample(manyenviron::agreements$IEADB, n = 10) code_known_agreements(IEADB$Title) #>  [1] NA NA NA NA NA NA NA NA NA NA # }"},{"path":"https://globalgov.github.io/manypkgs/reference/code_lineage.html","id":null,"dir":"Reference","previous_headings":"","what":"Code lineage from agreement titles — code_lineage","title":"Code lineage from agreement titles — code_lineage","text":"Code lineage agreement titles","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/code_lineage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Code lineage from agreement titles — code_lineage","text":"","code":"code_lineage(title = NULL, database = NULL)"},{"path":"https://globalgov.github.io/manypkgs/reference/code_lineage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Code lineage from agreement titles — code_lineage","text":"title title column agreements database database many packages ecosystem.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/code_lineage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Code lineage from agreement titles — code_lineage","text":"list lineages combines agreement area agreement action.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/code_lineage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Code lineage from agreement titles — code_lineage","text":"","code":"if (FALSE) { code_lineage(title = sample(manyenviron::agreements$IEADB$Title, 30)) code_lineage(database = manyenviron::texts) }"},{"path":"https://globalgov.github.io/manypkgs/reference/code_linkage.html","id":null,"dir":"Reference","previous_headings":"","what":"Code Agreement Linkages — code_linkage","title":"Code Agreement Linkages — code_linkage","text":"Identify linkage amendments protocols main agreement.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/code_linkage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Code Agreement Linkages — code_linkage","text":"","code":"code_linkage(title, date, return_all = FALSE)"},{"path":"https://globalgov.github.io/manypkgs/reference/code_linkage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Code Agreement Linkages — code_linkage","text":"title character vector treaty title date date variable return_all want variables returned list? default, FALSE.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/code_linkage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Code Agreement Linkages — code_linkage","text":"character vector agreements linked","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/code_linkage.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Code Agreement Linkages — code_linkage","text":"function identifies duplicates excluding \"predictable\" words strings, maintains key words used identify link duplicates. choice considers errors lie side false negatives rather false positives. complete list words removed title identify duplicates please run function without arguments (.e. code_linkage().)","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/code_linkage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Code Agreement Linkages — code_linkage","text":"","code":"# \\donttest{ IEADB <- dplyr::slice_sample(manyenviron::agreements$IEADB, n = 10) code_linkage(IEADB$Title, IEADB$Signature) #> ✔ Coded agreement parties #> ✔ Coded agreement type #> ✔ Coded known agreements #> ✔ Coded agreement dates #> ✔ Coded acronyms for agreements #>  [1] \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" # }"},{"path":"https://globalgov.github.io/manypkgs/reference/code_parties.html","id":null,"dir":"Reference","previous_headings":"","what":"Code Agreement Parties — code_parties","title":"Code Agreement Parties — code_parties","text":"Identify countries part agreement.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/code_parties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Code Agreement Parties — code_parties","text":"","code":"code_parties(title, activity = TRUE)"},{"path":"https://globalgov.github.io/manypkgs/reference/code_parties.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Code Agreement Parties — code_parties","text":"title character vector treaty titles activity want activity treaty coded? default, TRUE.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/code_parties.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Code Agreement Parties — code_parties","text":"character vector parties mentioned treaty title","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/code_parties.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Code Agreement Parties — code_parties","text":"function codes states treaties alongside, returning parties bileteral treaties (.e. 2 parties coded). function also returns \"activity\" bilateral treaties coded, activity TRUE. Bilateral agreements usully detail activity specify area last words titles. last words abbreviated function differentiate bilateral treaties avoid false positives generated since multiple, different, bileteral treaties often signed day. complete list parties coded please run function without argument (.e. code_parties()).","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/code_parties.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Code Agreement Parties — code_parties","text":"","code":"# \\donttest{ IEADB <- dplyr::slice_sample(manyenviron::agreements$IEADB, n = 10) code_parties(IEADB$Title) #>  [1] \"FIN-SWE[BSA]\" NA             NA             \"CHN-THA[SRN]\" NA             #>  [6] NA             \"CAN-CHN[PNE]\" \"MYS-NZL[ENV]\" NA             NA             # }"},{"path":"https://globalgov.github.io/manypkgs/reference/code_term.html","id":null,"dir":"Reference","previous_headings":"","what":"Code Treaty Termination Type — code_term","title":"Code Treaty Termination Type — code_term","text":"Creates column type termination treaty.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/code_term.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Code Treaty Termination Type — code_term","text":"","code":"code_term(title, text = NULL)"},{"path":"https://globalgov.github.io/manypkgs/reference/code_term.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Code Treaty Termination Type — code_term","text":"title title column variable text treaty text column variable","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/code_term.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Code Treaty Termination Type — code_term","text":"character vector termination clause type treaty","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/code_term.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Code Treaty Termination Type — code_term","text":"","code":"if (FALSE) { m <- manyenviron::texts$AGR_TXT[200:300,] code_term(m$Title) code_term(m$Title, m$Text) }"},{"path":"https://globalgov.github.io/manypkgs/reference/code_term_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Code treaty termination date — code_term_date","title":"Code treaty termination date — code_term_date","text":"Creates column date termination treaty.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/code_term_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Code treaty termination date — code_term_date","text":"","code":"code_term_date(title, text = NULL)"},{"path":"https://globalgov.github.io/manypkgs/reference/code_term_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Code treaty termination date — code_term_date","text":"title title column variable. text treaty text column variable","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/code_term_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Code treaty termination date — code_term_date","text":"character vector term date treaty","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/code_term_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Code treaty termination date — code_term_date","text":"","code":"# \\donttest{ GNEVAR <- dplyr::slice_sample(manyenviron::agreements$GNEVAR, n = 200) code_term_date(GNEVAR$Title) #>   [1] NA           NA           NA           NA           NA           #>   [6] NA           NA           NA           NA           NA           #>  [11] NA           NA           NA           NA           NA           #>  [16] NA           NA           NA           NA           NA           #>  [21] NA           NA           NA           NA           NA           #>  [26] NA           NA           NA           NA           NA           #>  [31] NA           NA           NA           NA           NA           #>  [36] NA           NA           NA           NA           NA           #>  [41] NA           NA           NA           NA           NA           #>  [46] NA           NA           NA           NA           NA           #>  [51] NA           NA           NA           NA           NA           #>  [56] NA           NA           NA           NA           NA           #>  [61] NA           NA           NA           NA           NA           #>  [66] NA           NA           NA           NA           NA           #>  [71] NA           NA           NA           NA           NA           #>  [76] NA           NA           NA           NA           NA           #>  [81] NA           NA           NA           NA           NA           #>  [86] NA           NA           NA           NA           NA           #>  [91] NA           NA           NA           NA           NA           #>  [96] NA           NA           NA           NA           NA           #> [101] NA           NA           NA           NA           NA           #> [106] NA           NA           NA           NA           NA           #> [111] NA           NA           NA           NA           NA           #> [116] NA           NA           NA           NA           NA           #> [121] NA           NA           NA           NA           NA           #> [126] NA           NA           NA           NA           NA           #> [131] NA           NA           NA           NA           NA           #> [136] \"1992-04-30\" NA           NA           NA           NA           #> [141] NA           NA           NA           NA           NA           #> [146] NA           NA           NA           NA           NA           #> [151] NA           NA           NA           NA           NA           #> [156] NA           NA           NA           NA           NA           #> [161] NA           NA           NA           NA           NA           #> [166] NA           NA           NA           NA           NA           #> [171] NA           NA           NA           NA           NA           #> [176] NA           \"2001-05-20\" NA           NA           NA           #> [181] NA           NA           NA           NA           NA           #> [186] NA           NA           NA           NA           \"2001-02-27\" #> [191] NA           NA           NA           NA           NA           #> [196] NA           NA           NA           NA           NA           # }"},{"path":"https://globalgov.github.io/manypkgs/reference/code_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Code Agreement Type — code_type","title":"Code Agreement Type — code_type","text":"Identify type international agreement titles. Agreements can , example, multilateral treaties coventions (), protocols (P) amendments (E), contain words title.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/code_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Code Agreement Type — code_type","text":"","code":"code_type(title)"},{"path":"https://globalgov.github.io/manypkgs/reference/code_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Code Agreement Type — code_type","text":"title character vector treaty title","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/code_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Code Agreement Type — code_type","text":"character vector treaty type","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/code_type.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Code Agreement Type — code_type","text":"Types agreements differentiate agreements protocols amendments, example. complete list types agreements coded please run function without argument (.e. code_type()).","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/code_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Code Agreement Type — code_type","text":"","code":"# \\donttest{ IEADB <- dplyr::slice_sample(manyenviron::agreements$IEADB, n = 10) code_type(IEADB$Title) #>  [1] \"A\"  \"A\"  \"N\"  \"A\"  \"P\"  \"A\"  \"A\"  \"P2\" \"S\"  \"A\"  # }"},{"path":"https://globalgov.github.io/manypkgs/reference/condense_agreements.html","id":null,"dir":"Reference","previous_headings":"","what":"Condense similar treatyIDs — condense_agreements","title":"Condense similar treatyIDs — condense_agreements","text":"Different treatyIDs generated different datasets might minor differences terms acronym linkage. minor differences treatyIDs mean different treatyIDS different datasets actually refer agreement. function finds occurences returns first treatyID argument entered replacement.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/condense_agreements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Condense similar treatyIDs — condense_agreements","text":"","code":"condense_agreements(database = NULL, var = NULL)"},{"path":"https://globalgov.github.io/manypkgs/reference/condense_agreements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Condense similar treatyIDs — condense_agreements","text":"database \"many\" package database var Two treatyID variables","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/condense_agreements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Condense similar treatyIDs — condense_agreements","text":"dataframe treatyID treatyID references","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/condense_agreements.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Condense similar treatyIDs — condense_agreements","text":"","code":"data1 <- data.frame(treatyID = c(\"CPV-PRT[FSD]_1980A\", \"CPV-PRT[FSD]_1990P:FSD_1980A\", \"TD06LJ_1981A\", \"RAMSA_1971A\", \"WIIEWH_1982P\")) data2 <- data.frame(treatyID = c(\"TD06LJ_1981A\", \"RAMSA_1971A\", \"WIIEWH_1982P:RAMSA_1971A\", \"PRTRPC_1976A\", \"PRTRPC_1983E1:PRTRPC_1976A\")) manyID <- condense_agreements(var = c(data1$treatyID, data2$treatyID)) data1 <- merge(data1, manyID) data2 <- merge(data2, manyID)"},{"path":"https://globalgov.github.io/manypkgs/reference/convert_pdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and convert PDFs to text — convert_pdf","title":"Get and convert PDFs to text — convert_pdf","text":"Get convert PDFs text","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/convert_pdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and convert PDFs to text — convert_pdf","text":"","code":"convert_pdf(path)"},{"path":"https://globalgov.github.io/manypkgs/reference/convert_pdf.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get and convert PDFs to text — convert_pdf","text":"https://stackoverflow.com/questions/71064939/--check--pdf--scanned-image--contains-text--r","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/convert_pdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and convert PDFs to text — convert_pdf","text":"path file(s) path. path can also specified folder multiple PDF files, case PDF files folder converted.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/convert_pdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get and convert PDFs to text — convert_pdf","text":"list converted texts.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/convert_pdf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get and convert PDFs to text — convert_pdf","text":"PDF file \"readable\" format, function attempts apply optical character recognition (OCR) convert text.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/convert_pdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get and convert PDFs to text — convert_pdf","text":"","code":"if (FALSE) { convert_pdf(path = getwd()) }"},{"path":[]},{"path":"https://globalgov.github.io/manypkgs/reference/defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions that have been renamed, superseded, or are no longer working — defunct","text":"","code":"standardise_dates(...)  standardize_dates(...)"},{"path":"https://globalgov.github.io/manypkgs/reference/defunct.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Functions that have been renamed, superseded, or are no longer working — defunct","text":"standardise_dates: Deprecated 2022-05-17. wrapper function deprecated functionality included original make_messydates() function. Please refer documentation details new implementation. standardize_dates: Deprecated 2022-05-17. wrapper function deprecated functionality included original make_messydates() function. Please refer documentation details new implementation.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/depends.html","id":null,"dir":"Reference","previous_headings":"","what":"Loading packages — depends","title":"Loading packages — depends","text":"Function loading , necessary, installing packages","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/depends.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Loading packages — depends","text":"","code":"depends(packages)"},{"path":"https://globalgov.github.io/manypkgs/reference/depends.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loading packages — depends","text":"packages Character vector packages install CRAN GitHub","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/depends.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Loading packages — depends","text":"Loads , necessary, first installs packages","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/depends.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Loading packages — depends","text":"function looks required packages loads ones already installed, installing loading packages installed. CRAN packages package name required argument, GitHub username/repo required argument.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/depends.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Loading packages — depends","text":"","code":"# \\donttest{ depends(\"manypkgs\") #> [[1]] #> [1] \"manypkgs\"  \"stats\"     \"graphics\"  \"grDevices\" \"utils\"     \"datasets\"  #> [7] \"methods\"   \"base\"      #>  # }"},{"path":"https://globalgov.github.io/manypkgs/reference/export_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Adding datasets to the many packages universe — export_data","title":"Adding datasets to the many packages universe — export_data","text":"Save cleaned data object, consistent manydata universe, ready lazy-loaded create scripts documenting testing object within new package.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/export_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adding datasets to the many packages universe — export_data","text":"","code":"export_data(..., database, URL)"},{"path":"https://globalgov.github.io/manypkgs/reference/export_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adding datasets to the many packages universe — export_data","text":"... Unquoted name dataset object save. database Quoted name existing database database created. URL website URL source dataset.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/export_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adding datasets to the many packages universe — export_data","text":"function saves dataset named database, silently creates set tests dataset, creates opens documentation dataset.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/export_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adding datasets to the many packages universe — export_data","text":"function creates data directory, nonexistent, saves cleaned data. functions also creates script testing cleaned data make sure complies manydata requirements. well, creates documentation script help documenting data sources describing variables. Note users need provide .bib file citation purposes alongside dataset corresponding data-raw subfolder.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/export_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adding datasets to the many packages universe — export_data","text":"","code":"if (FALSE) { export_data(COW, database = \"states\", URL = \"https://correlatesofwar.org/data-sets/state-system-membership\") }"},{"path":"https://globalgov.github.io/manypkgs/reference/import_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Imports and establishes preparation of raw data — import_data","title":"Imports and establishes preparation of raw data — import_data","text":"Creates data-raw folder, moves raw data files consistent location, provides script makes easy clean wrangle data format consistent manydata universe.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/import_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Imports and establishes preparation of raw data — import_data","text":"","code":"import_data(   dataset = NULL,   database = NULL,   path = NULL,   codebook = NULL,   delete_original = FALSE,   open = rlang::is_interactive() )"},{"path":"https://globalgov.github.io/manypkgs/reference/import_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Imports and establishes preparation of raw data — import_data","text":"dataset Intended (short) name dataset. , name two-dimensional tabular data format. consistency reasons, unique name capitals. Abbreviations make good dataset names, \"COW\" \"DESTA\". database Intended name database datacube. , name population phenomenon dataset relates. consistency reasons, unique name small letters. Concepts make good database names, \"states\" \"colonial_relations\". path Path raw data file. left unspecified, dialogue box raised select file via system. codebook Path codebook imported raw-data folder delete_original Whether original file moved (TRUE) copied (FALSE). default FALSE. open Whether resulting preparation script opened. default TRUE.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/import_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Imports and establishes preparation of raw data — import_data","text":"Places chosen file folder hierarchy within package \"data-raw/{database}/{dataset}/\" creates opens script folder preparing data use package.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/import_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Imports and establishes preparation of raw data — import_data","text":"function assists importing existing raw data universe packages. function two main things. First, moves copies chosen file \"data-raw/\" folder current package. hierarchy folder established. first checks whether already folder \"data-raw/\" harddrive name database , folder, creates one. also checks whether already folder consistent name dataset. folder, creates one. Finally, places chosen file dataset folder. argument delete_original = TRUE original file deleted. can useful , example, file just downloaded \"Downloads\" folder. Second, function creates new script dataset-level folder, alongside raw data file. default, also opens script RStudio equivalent IDE. purpose script read file R, cleaning data wrangling manydata-consistent format, exporting use package. Quite bit pre-populated either using information given import_data(), inferring required name format file. Currently supported formats include: .txt .csv, .xlsx, .xls, .dta , .RData.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/import_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Imports and establishes preparation of raw data — import_data","text":"","code":"if (FALSE) { import_data(dataset = \"COW\", database = \"states\") }"},{"path":"https://globalgov.github.io/manypkgs/reference/retain.html","id":null,"dir":"Reference","previous_headings":"","what":"Keep objects from the global environment — retain","title":"Keep objects from the global environment — retain","text":"Function keeping objects global environment. removes variables dataset global environment except specified given character vector, regular expression .","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/retain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Keep objects from the global environment — retain","text":"","code":"retain(   keep = NULL,   envir = .GlobalEnv,   keep_functions = TRUE,   gc_limit = 100,   regex = \"auto\" )"},{"path":"https://globalgov.github.io/manypkgs/reference/retain.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Keep objects from the global environment — retain","text":"https://bitbucket.org/mehrad_mahmoudian/varhandle/src/master/R/rm...R","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/retain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Keep objects from the global environment — retain","text":"keep vector containing name variables wish keep remove regular expression match variables want keep. Variable names regular expressions can used combined argument 'regex' set \"auto\". (Mandatory) envir environment function functional , search act . (Optional) keep_functions logical vector length 1 indicating exclusion function variables removal. (optional) gc_limit numeric vector length 1 indicating threshold garbage collection Megabyte (MB) scale. (Optional) regex vector length 1 define whether function use regular expression keep (TRUE FALSE) auto detect (\"auto\")","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/retain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Keep objects from the global environment — retain","text":"Clears environment except stated objects.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/retain.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Keep objects from the global environment — retain","text":"function suitable Small semi-large projects massive amount data performs variable operations fast efficient way. function also useful developers preparing assembling pipeline","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/retain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Keep objects from the global environment — retain","text":"","code":"origins <- c(\"New Zealand\", \"Brazil\", \"Switzerland\") members <- c(1, 1, 2) team <- data.frame(origins, members) team #>       origins members #> 1 New Zealand       1 #> 2      Brazil       1 #> 3 Switzerland       2 retain(\"origins\") #> Error in retain(\"origins\"): All the items in the keep should be a real existing #>                    variable or valid regular expressions. #> The following #>                    is/are not among variables of selected environment or #>                    patterns that match anything! #>  origins origins #> [1] \"New Zealand\" \"Brazil\"      \"Switzerland\""},{"path":"https://globalgov.github.io/manypkgs/reference/retrieve_clauses.html","id":null,"dir":"Reference","previous_headings":"","what":"Get treaty articles by number or match — retrieve_clauses","title":"Get treaty articles by number or match — retrieve_clauses","text":"function splits treaty texts lists reflect structure based preamble several articles. articles split, users can access \"preambles\", \"accession\" \"termination\" clauses, \"annexes\" within collection treaty texts. selection articles relies regex matching certain expressions unique . Alternatively, users can get articles contain certain 'desired' word within collection treaty texts. well, users can select certain types treaties specific articles returned (e.g. agreements).","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/retrieve_clauses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get treaty articles by number or match — retrieve_clauses","text":"","code":"retrieve_clauses(textvar, article = NULL, match = NULL, treaty_type = \"all\")"},{"path":"https://globalgov.github.io/manypkgs/reference/retrieve_clauses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get treaty articles by number or match — retrieve_clauses","text":"textvar text variable article like get specific article? Null default. options include \"preamble\", \"termination\" clause, \"membership\" clause, \"annex\". specified portion treaties returned. match regex match word(s) expression. multiple words, please use \"|\" divide . treaty_type types treaty want look ? default, \"\". treaty types include: \"agreements\", \"protocols\", \"amendments\", \"notes\", \"memorandum\", \"resolutions\".","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/retrieve_clauses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get treaty articles by number or match — retrieve_clauses","text":"list treaty sections length.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/retrieve_clauses.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get treaty articles by number or match — retrieve_clauses","text":"Please make sure treaty texts standardised first using standardise_texts() best results.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/retrieve_clauses.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get treaty articles by number or match — retrieve_clauses","text":"","code":"if (FALSE) { t <- standardise_treaty_text(sample(manyenviron::texts$AGR_TXT$Text, 30)) retrieve_clauses(t) retrieve_clauses(t, article = \"preamble\") retrieve_clauses(t, article = \"accession\") retrieve_clauses(t, article = \"termination\") retrieve_clauses(t, article = \"annex\") retrieve_clauses(t, match = \"constitution\") retrieve_clauses(t, article = \"preamble\", match = \"amend\") retrieve_clauses(t, treaty_type = \"agreements\") retrieve_clauses(t, treaty_type = \"protocols\") retrieve_clauses(t, treaty_type = \"amendments\") }"},{"path":"https://globalgov.github.io/manypkgs/reference/retrieve_links.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve links from manyID — retrieve_links","title":"Retrieve links from manyID — retrieve_links","text":"Treaties modify, amend, expand treaties usually specify title. use manyIDs generated code_agreements() condense_agreements() return data frame treaty links database.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/retrieve_links.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve links from manyID — retrieve_links","text":"","code":"retrieve_links(database, dataset, treaty_type = \"all\")"},{"path":"https://globalgov.github.io/manypkgs/reference/retrieve_links.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve links from manyID — retrieve_links","text":"database Package database dataset Package dataset treaty_type type treaties returned. default, treaties returned. options include bilateral multilateral treaties.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/retrieve_links.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve links from manyID — retrieve_links","text":"dataframe agreements' treatyID linkages.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/retrieve_links.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve links from manyID — retrieve_links","text":"","code":"if (FALSE) { retrieve_links(database = manyenviron::agreements) retrieve_links(database = manyenviron::agreements, treaty_type = \"multilateral\") retrieve_links(dataset = manyenviron::agreements$IEADB, treaty_type = \"bilateral\") samples <- lapply(manyenviron::agreements, function(x) x[x$Beg > \"1991-12-31\" & x$Beg < \"1993-01-01\", ]) migraph::gglineage(retrieve_links(samples)) }"},{"path":"https://globalgov.github.io/manypkgs/reference/retrieve_membership_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve memberships' list — retrieve_membership_list","title":"Retrieve memberships' list — retrieve_membership_list","text":"Memberships database actor column(s) treaty column(s) information countries party treaties often hard read. function generates dataframe treaty IDs actors certain treaty.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/retrieve_membership_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve memberships' list — retrieve_membership_list","text":"","code":"retrieve_membership_list(database, actor, id)"},{"path":"https://globalgov.github.io/manypkgs/reference/retrieve_membership_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve memberships' list — retrieve_membership_list","text":"database database actor actor level variable (e.g. country) id treaty ID variable","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/retrieve_membership_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve memberships' list — retrieve_membership_list","text":"dataframe treaty IDs actors part treaty","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/retrieve_membership_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve memberships' list — retrieve_membership_list","text":"","code":"if (FALSE) { sample <- manyenviron::memberships$IEADB_MEM retrieve_membership_list(actor = sample$CountryID, id = sample$manyID) retrieve_membership_list(manyenviron::memberships) }"},{"path":"https://globalgov.github.io/manypkgs/reference/setup_package.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new package in the manydata universe — setup_package","title":"Create a new package in the manydata universe — setup_package","text":"Creates new package , consistent , manydata universe","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/setup_package.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new package in the manydata universe — setup_package","text":"","code":"setup_package(   package = NULL,   name = NULL,   role = NULL,   orcid = NULL,   update = TRUE,   path = getwd() )"},{"path":"https://globalgov.github.io/manypkgs/reference/setup_package.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new package in the manydata universe — setup_package","text":"package string giving desired name package, must start \"many\" name list vectors giving package author(s)' name(s). Authors(s)last name(s) first name(s) separated comma. role list vectors roles package authors project. roles declared, roles set contributor. orcid vector strings ORCID numbers authors. Needs {rorcid} package installed. Takes precedence manual entries specified. update logical indicating whether existing files overwritten, default TRUE. path string, missing default path working directory","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/setup_package.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new package in the manydata universe — setup_package","text":"new package structure","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/setup_package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a new package in the manydata universe — setup_package","text":"function establishes many required files folder structures required manydata-consistent data package.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/setup_package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new package in the manydata universe — setup_package","text":"","code":"if (FALSE) { setup_package(\"manystates\", name = \"Hollway, James\") setup_package(\"manystates\",                orcid = c(\"0000-0002-8361-9647\")) }"},{"path":"https://globalgov.github.io/manypkgs/reference/standardise_titles.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardise titles — standardise_titles","title":"Standardise titles — standardise_titles","text":"Standardises words character title variable improve readability, facilitate string matching enable accurate comparisons variables different datatsets.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/standardise_titles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardise titles — standardise_titles","text":"","code":"standardise_titles(s, auth_key = NULL)  standardize_titles(s, auth_key = NULL)"},{"path":"https://globalgov.github.io/manypkgs/reference/standardise_titles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardise titles — standardise_titles","text":"s string auth_key DeepL authentication key provided argument, function detects strings languages translates English. get free (paid) DeepL authentication key please see: https://www.deepl.com/pro#developer","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/standardise_titles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardise titles — standardise_titles","text":"capitalised, trimmed standardised string","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/standardise_titles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standardise titles — standardise_titles","text":"function capitalises words strings passed . trims white spaces start, middle end strings. Removes ambiguous punctions symbols strings. strings transformed ASCII character encoding. Written numbers ordinal form transformed numerical form.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/standardise_titles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardise titles — standardise_titles","text":"","code":"e <- standardise_titles(\"A treaty concerning things\") e==c(\"A Treaty Concerning Things\") #> [1] TRUE"},{"path":"https://globalgov.github.io/manypkgs/reference/standardise_treaty_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardise treaty texts — standardise_treaty_text","title":"Standardise treaty texts — standardise_treaty_text","text":"function standardises treaty texts removing punctuation markers, splitting texts articles annexes.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/standardise_treaty_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardise treaty texts — standardise_treaty_text","text":"","code":"standardise_treaty_text(textvar)  standardize_treaty_text(textvar)"},{"path":"https://globalgov.github.io/manypkgs/reference/standardise_treaty_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardise treaty texts — standardise_treaty_text","text":"textvar text variable.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/standardise_treaty_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardise treaty texts — standardise_treaty_text","text":"list treaty sections length.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/standardise_treaty_text.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standardise treaty texts — standardise_treaty_text","text":"Treaty texts always similar imported R. treaty texts, example, contain paragraph markers others come one text chunk. standardise_treaty_text() facilitates cleaning annotation treaty texts information clauses can retrieved later stage retrieve_clauses() function.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/standardise_treaty_text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardise treaty texts — standardise_treaty_text","text":"","code":"if (FALSE) { standardise_treaty_text(sample(manyenviron::texts$AGR_TXT$Text, 30)) }"},{"path":"https://globalgov.github.io/manypkgs/reference/update_package.html","id":null,"dir":"Reference","previous_headings":"","what":"Updates packages of our data universe — update_package","title":"Updates packages of our data universe — update_package","text":"packages evolve, expectations package structures well templates might also change. function updates files packages setup setup_package().","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/update_package.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Updates packages of our data universe — update_package","text":"","code":"update_package(package = NULL, name = NULL, path = getwd())"},{"path":"https://globalgov.github.io/manypkgs/reference/update_package.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Updates packages of our data universe — update_package","text":"package name package updated, optional. declared package name extracted description. name list vectors giving package author(s)' name(s). Optional. Authors(s)last name(s) first name(s) separated comma. path file path, optional. specified, function gets current working directory.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/update_package.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Updates packages of our data universe — update_package","text":"Updated files correct structure packages.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/update_package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Updates packages of our data universe — update_package","text":"files .github folder, workflow actions, pull request templates, issue templates, automatically updated. function also asks developers files package license, contributing file, code conduct updated.","code":""},{"path":"https://globalgov.github.io/manypkgs/reference/update_package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Updates packages of our data universe — update_package","text":"","code":"if (FALSE) { update_package(\"manystates\") }"},{"path":[]},{"path":"https://globalgov.github.io/manypkgs/news/index.html","id":"package-0-2-2","dir":"Changelog","previous_headings":"","what":"Package","title":"manypkgs 0.2.2","text":"Closed #55 updating README workflow files download manydata CRAN Closed #74 increasing package logo size Updated workflow action files run faster implementing package caching Closed #78 defining consistent ways dealing code errors ‘many’ data packages Closed #85 adding guidelines writing markdown documents contributing files","code":""},{"path":"https://globalgov.github.io/manypkgs/news/index.html","id":"correction-0-2-2","dir":"Changelog","previous_headings":"","what":"Correction","title":"manypkgs 0.2.2","text":"Closed #18 adding convert_pdf() function extract texts PDF files Divided get_articles() retrieve_clauses() retrieving treaty clauses standardise_treaty_text() standardising texts Closed #75 fixing memory usage issues function Renamed code_memebership() function code_accession_terms() clarity Closed #76 improving dictionary matching functions Closed #77 making standardise_dates() defunct favour calling {messydates} directly dates conversion Closed #80 updating standardise_titles() use deeplr package translating titles Closed #84 adding standardise_texts() function standardise treaty texts data preparation scripts Renamed get_memberships() get_links() retrieve_memberships() retrieve_links(), respectively, clarity","code":""},{"path":[]},{"path":"https://globalgov.github.io/manypkgs/news/index.html","id":"package-0-2-1","dir":"Changelog","previous_headings":"","what":"Package","title":"manypkgs 0.2.1","text":"Closed #11 adding informative skimr output documentation Closed #52 moving interleave() {messydates} package Closed #61 #63 changing references “qPackages” “manyPackages” Closed #71 changing references many_ID treaty_ID manyID treatyID","code":""},{"path":"https://globalgov.github.io/manypkgs/news/index.html","id":"correction-0-2-1","dir":"Changelog","previous_headings":"","what":"Correction","title":"manypkgs 0.2.1","text":"Renamed code_grounds() function code_memberships() clarity consistency Added code_term_date() code treaty termination date Added get_memberships() get memberships’ lists data frame Closed #51 integrating texts code_term() code_memberships() Closed #64 improving code_term() code_memberships() extract information texts Added code_entity() function extract entities treaty titles Added code_domain() function code domains agreement titles Closed #65 #70 updating dictionary words used identify domains treaty titles Added get_links() get links manyID facilitate plotting migraph Closed #68 writing tests code_lineage() related functions","code":""},{"path":"https://globalgov.github.io/manypkgs/news/index.html","id":"connection-0-2-1","dir":"Changelog","previous_headings":"","what":"Connection","title":"manypkgs 0.2.1","text":"Closed #17 updating translate argument standardise_titles() Closed #66 fixing bugs lingua() function Renamed get_treaty() function get_articles() clarity Updated split_treaty() become helper function get_articles() Closed #69 making get_articles() split_treaty() work various types treaty texts","code":""},{"path":[]},{"path":"https://globalgov.github.io/manypkgs/news/index.html","id":"package-0-2-0","dir":"Changelog","previous_headings":"","what":"Package","title":"manypkgs 0.2.0","text":"Closed #58 renaming package qCreate manypkgs Closed #28 adding cheatsheet README","code":""},{"path":"https://globalgov.github.io/manypkgs/news/index.html","id":"correction-0-2-0","dir":"Changelog","previous_headings":"","what":"Correction","title":"manypkgs 0.2.0","text":"Closed #57 updating code agreements() condense_qID() make code concise Closed #48 updating data preparation template export_data() Updated countryregex table used code_parties() countries detected accurately","code":""},{"path":"https://globalgov.github.io/manypkgs/news/index.html","id":"connection-0-2-0","dir":"Changelog","previous_headings":"","what":"Connection","title":"manypkgs 0.2.0","text":"Closed #9 adding lingua() function translating text English Added split_treaty() split treaty text preamble articles Added get_treaty() get matching articles number word match","code":""}]
